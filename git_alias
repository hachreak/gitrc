#!/bin/bash
#
# >>> Copyright
#
# Leonardo Rossi <leonardo.rossi@studenti.unipr.it>
#
# Copyright (C) 2015 Leonardo Rossi.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.
#
# Git utils

green='\e[0;31m'
blue='\e[0;34m'
NC='\e[0m' # No Color'

# List all my repositories.
#
# e.g. in src/ you have your list of repositories
#    > git_find_my_repositories mynickname
#      project_1
#      project_2
#      project_4
#
git_find_my_repositories(){
  REPOSOTORIES=`ls -1d */.git|awk -F"/" '{print $1}'`
  ORIGIN="$1"
  for i in $REPOSOTORIES; do
    cd $i
    if [ "`git remote -v | grep "${ORIGIN}/${i}" | wc -l`" -ne 0 ]; then
      echo $i
    fi
    cd ..
  done
}

# Show the list of repository that have some branch currently merged.
#
# e.g. in src/ you have your list of repositories
#    > git_find_merged_branch_in_repositories
#    [blinker]
#    develop
#    * master
#    [invenio-base]
#    3482_remove_plotextrator
#    * master
#
# In this case you can remove (using `gbr`) develop branch from `blinker`
# project and `3482_remove_plotextrator` from `invenio-base` project.
#
git_find_merged_branch_in_repositories(){
  REPOSOTORIES=`ls -1d */.git|awk -F"/" '{print $1}'`

  HOME_DIR=`pwd`
  for i in $REPOSOTORIES; do
    # go to repository
    cd $i
    if [ `git branch --merged | wc -l` -gt 1 ]; then
      CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
      echo -e "[${blue}$i${NC}]"
      git branch --merged
    fi
    # return to home
    cd $HOME_DIR
  done
}

# Remove a branch from the repository.
# Note: it can be removed only if already merged in current branch.
#       to remove also the tracket branch, add `-r` at the end of command.
#
#    e.g. $> gbr fuu_branch -r
#
# It will remove fuu_branch from local branch and the fuu_branch tracked branch.
#
git_branch_remove(){
  # check if branch exists
  [ "$#" -lt 1 ] || [ `git branch | grep $1 | wc -l` -eq 0 ] && echo -e "[${red}ERROR${NC}] branch $1 not found" && return 1
  # check if the branch is already merged
  [ `git branch --merged | grep $1 | wc -l` -eq 0 ] && echo -e "[${red}ERROR${NC}] branch $1 not merged" && return 1
  # remove remote branch
  if [ "$2" = "-r" ]; then
    REMOTE_REPO_BRANCH=`git rev-parse --abbrev-ref --symbolic-full-name $1@{u}`
    [ $? -ne 0 ] && echo -e "[${red}ERROR${NC}] remote branch for $1 not found" && return 1
    REMOTE_BRANCH=`echo $REMOTE_REPO_BRANCH | awk -F"/" '{print $2}'`
    REMOTE_REPO=`echo $REMOTE_REPO_BRANCH | awk -F"/" '{print $1}'`
    git push $REMOTE_REPO :${REMOTE_BRANCH} && echo -e "[${green}OK${NC}] remove branch $REMOTE_REPO/${REMOTE_BRANCH} removed"
  fi
  # remove local branch
  git branch -d $1 && echo -e "[${green}OK${NC}] local branch $1 removed"
}

# Git sync branch.
# Syncronize the master branch with remote branch.
# In case remote master is different from origin, than sync also the origin
# Param:
#  1. (optional) branch to sync. Default: master
git_sync_local_branch(){
  BRANCH=${1:-master}
  # update only if there is not changes not committed
  ! git diff --quiet HEAD &&  return

  # fetch all repositories
  git fetch --all

  git checkout $BRANCH
  # get tracked branch
  REMOTE_REPO_BRANCH=`git rev-parse --abbrev-ref --symbolic-full-name @{u}`
  if [ $? -eq 0 ]; then
    REMOTE_BRANCH=`echo $REMOTE_REPO_BRANCH | awk -F"/" '{print $2}'`
    REMOTE_REPO=`echo $REMOTE_REPO_BRANCH | awk -F"/" '{print $1}'`

    # fast-forward from remote branch
    git merge --ff-only $REMOTE_REPO/$REMOTE_BRANCH

    # if remote is not origin, then sync the origin
    if [ $REMOTE_REPO != 'origin' ]; then
      git push origin $BRANCH
    fi
  fi
}

# Git sync all master of local repositories.
# Sync all local master repositories with remote.
# Note: (call git_sync_local_branch for every repository and sync the master
#        branch).
# Note: to have a list of repositories, call `git_find_my_repositories myuser`
#
#   e.g. > git_sync_local_master_repositories `git_find_my_repositories myuser`
#
git_sync_local_master_repositories(){
  REPOSOTORIES="$@"

  HOME_DIR=`pwd`
  for i in $REPOSOTORIES; do
    echo -e "${blue}[sync]${NC} $i"
    # go to repository
    cd $i
    git_sync_local_branch
    # return to home
    cd $HOME_DIR
  done
}


# Show branch status (which branch need to be sync with remote branch)
git_branches_status(){
  git for-each-ref --format='%(refname:short)' refs/heads/* | \
    while read b; do
      if r=$(git config --get branch.$b.remote); then
        m=$(git config --get branch.$b.merge)
        count=`git rev-list --left-right $b..$r/${m##*/}|wc -l`
        if [ $count -ne 0 ]; then
          echo -e "${blue}[$count]${NC} $b -> $r/${m##*/}"
        fi
      fi
    done
}

# Track branch -> $remote.branch
# e.g.
#   To track this branch to upstream/foo:
#     git-track upstream foo
#   To track this branch "thisbranch" to upstream/thisbranch
#     git-track upstream
#   To track this branch "thisbranch" to origin/thisbranch
#     git-track
#
git_track(){
  remote=${1:-origin}
  tracking_default=`git symbolic-ref --short HEAD`
  tracking=${2:-$tracking_default}
  # set remote
  git config branch.$tracking.remote $remote
  # set remote branch to track
  git config branch.$tracking.merge refs/heads/$tracking
  echo "tracking $remote/$tracking"
}

# On conflicts (e.g. on rebasing), if the HEAD sets as "Deleted" and in your
# branch is "Updated".
#
# e.g.
#      laptop> gs
#      DU /path/to/file1
#      DU /path/to/file2
#      DU /path/to/file3
#      UU /path/to/file3
#
# The function set files 1,2,3 as "Deleted".
#
#      laptop> git_conflicts_delete
git_resolve_conflicts_delete(){
  FILES_SET_AS_DELETED=`gs|grep ^D|awk '{print $2}'`
  for i in $FILES_SET_AS_DELETED; do
    git rm $i;
  done
}


alias ga="git add ."
alias gb="git branch -vv"
alias gbm="git branch --merged"
alias gbnm="git branch --no-merged"
alias gbr="git_branch_remove"
alias gbs="git_branches_status"
alias gccb="gcck -b"
alias gcck="git checkout"
alias gcoa="git commit -a -s"
alias gcoaa="gcoa --amend"
alias gdhh="git diff HEAD^ HEAD"
alias gfa="git fetch --all"
alias gfmr="git_find_my_repositories"
alias gg="git grep"
alias gk="git ka"
alias gp="git push -f"
alias gpo="gp origin"
alias gs="git status -bs"
alias gt="git_track"
